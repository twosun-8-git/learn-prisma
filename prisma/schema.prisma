generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "erd.md"
  theme    = "dark"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  email     String    @unique @db.VarChar(255)
  sex       String    @default("male") @db.VarChar(10)
  age       Int?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0) // @map("created_at") データベースのカラム名を指定
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  orders    Order[]
  reviews   Review[]
  password  String    @db.VarChar(255)

  @@map("users") // DBのテーブル名を指定
}

model Product {
  id         Int         @id @default(autoincrement())
  name       String      @unique　@db.VarChar(100)
  price      Int?
  stock      Int
  createdAt  DateTime?   @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

enum orders_status {
  pending
  processing
  shipped
  delivered
  cancelled
}

model Order {
  id          Int            @id @default(autoincrement())
  userId      Int            @map("user_id")
  totalAmount Decimal        @map("total_amount") @db.Decimal(10, 2)
  status      orders_status? @default(pending)
  createdAt   DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime?      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  orderItems  OrderItem[]
  user        User           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_ibfk_1")

  @@index([userId], map: "user_id")
  @@map("orders")
}

model OrderItem {
  id        Int       @id @default(autoincrement())
  orderId   Int       @map("order_id")
  productId Int       @map("product_id")
  quantity  Int
  price     Int
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_items_ibfk_1")
  product   Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "order_items_ibfk_2")

  @@index([orderId], map: "order_id")
  @@index([productId], map: "product_id")
  @@map("order_items")
}

model Review {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  productId Int       @map("product_id")
  rating    Int?
  comment   String?   @db.Text
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_ibfk_1")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_ibfk_2")

  // onDelete: Cascade は、ユーザーが削除された場合、レビューも削除される
  // onUpdate: NoAction は、ユーザーが更新された場合、レビューは更新されない
  // map: "reviews_ibfk_1" は、外部キー制約名（外部キー関係を識別するための一意の名前）

  @@unique([userId, productId], map: "unique_user_product")
  @@index([productId], map: "product_id")
  @@map("reviews")
}
